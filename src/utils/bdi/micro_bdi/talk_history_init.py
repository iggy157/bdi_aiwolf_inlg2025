#!/usr/bin/env python3
"""Initialize talk history files for all peers with default affinity scores.

各エージェントの相手方に対するトーク履歴ファイルを初期化するモジュール.
"""

import logging
import re
from pathlib import Path
from typing import Any, Optional

import yaml

DEFAULT_SCORE = 0.5
TALK_DIR_CANDIDATES = ("talk_history", "トーク履歴")

logger = logging.getLogger(__name__)


def sanitize_name(name: str) -> str:
    """Sanitize agent name for use as filename."""
    if not name:
        return "unknown"
    s = re.sub(r'[/\\:*?"<>|\0]', "", str(name)).strip()
    return s or "unknown"


def determine_talk_dir(agent_dir: Path, candidates: tuple[str, ...] = TALK_DIR_CANDIDATES) -> Path:
    """Determine which talk directory to use, creating if necessary."""
    for dirname in candidates:
        talk_dir = agent_dir / dirname
        if talk_dir.exists():
            return talk_dir
    
    # Default to first candidate if none exist
    default_dir = agent_dir / candidates[0]
    default_dir.mkdir(parents=True, exist_ok=True)
    return default_dir


def load_existing_talk_file(file_path: Path) -> Optional[dict[str, Any]]:
    """Load existing talk history file, return None if not found or invalid."""
    if not file_path.exists():
        return None
    
    try:
        with file_path.open("r", encoding="utf-8") as f:
            data = yaml.safe_load(f)
        if isinstance(data, dict):
            return data
        logger.warning("Invalid YAML format (expected dict) at %s", file_path)
    except Exception as e:
        logger.warning("Failed to load existing file %s: %s", file_path, e)
    
    return None


def create_default_talk_file(
    file_path: Path,
    liking: float = DEFAULT_SCORE,
    creditability: float = DEFAULT_SCORE,
    overwrite: bool = False,
    logger_obj: Optional[logging.Logger] = None,
) -> bool:
    """Create or update a talk history file with default scores."""
    log = logger_obj or logger
    
    existing_data = load_existing_talk_file(file_path)
    
    # If file exists and overwrite is False, check if headers are missing
    if existing_data is not None and not overwrite:
        needs_header_update = False
        
        # Check if headers are missing
        if "liking" not in existing_data:
            existing_data["liking"] = liking
            needs_header_update = True
        if "creditability" not in existing_data:
            existing_data["creditability"] = creditability
            needs_header_update = True
        if "items" not in existing_data:
            existing_data["items"] = []
            needs_header_update = True
        
        if needs_header_update:
            log.info("Updating missing headers in existing file: %s", file_path)
        else:
            log.debug("File already exists with headers, skipping: %s", file_path)
            return False
    else:
        # Create new file or overwrite existing
        existing_data = {
            "liking": liking,
            "creditability": creditability,
            "items": existing_data.get("items", []) if existing_data else []
        }
    
    # Write the file
    try:
        with file_path.open("w", encoding="utf-8") as f:
            f.write("# generated by utils.bdi.micro_bdi.talk_history_init\n")
            yaml.safe_dump(
                existing_data,
                f,
                sort_keys=False,
                allow_unicode=True,
                default_flow_style=False
            )
        log.info("Created/updated talk history file: %s", file_path)
        return True
    except Exception as e:
        log.warning("Failed to write talk history file %s: %s", file_path, e)
        return False


def init_talk_history_for_agent(
    base_dir: Path,
    game_id: str,
    agent: str,
    peers: list[str],
    talk_dir_candidates: tuple[str, ...] = TALK_DIR_CANDIDATES,
    default_score: float = DEFAULT_SCORE,
    overwrite: bool = False,
    logger_obj: Optional[logging.Logger] = None,
) -> Path:
    """Initialize talk history files for all peers except self.
    
    Args:
        base_dir: Base directory for BDI info
        game_id: Game ID
        agent: This agent's name
        peers: List of all agent names in the game
        talk_dir_candidates: Directory name candidates for talk history
        default_score: Default liking/creditability score
        overwrite: Whether to overwrite existing files
        logger_obj: Logger instance to use
    
    Returns:
        Path to the talk directory that was used
    
    Raises:
        Exception: If agent directory doesn't exist or creation fails
    """
    log = logger_obj or logger
    
    agent_dir = base_dir / game_id / agent
    if not agent_dir.exists():
        raise FileNotFoundError(f"Agent directory not found: {agent_dir}")
    
    # Determine which talk directory to use
    talk_dir = determine_talk_dir(agent_dir, talk_dir_candidates)
    log.info("Using talk directory: %s", talk_dir)
    
    # Sanitize names
    agent_clean = sanitize_name(agent)
    
    # Initialize files for all peers except self
    created_count = 0
    updated_count = 0
    
    for peer in peers:
        peer_clean = sanitize_name(peer)
        
        # Skip self
        if peer_clean == agent_clean or peer == agent:
            log.debug("Skipping self: %s", peer)
            continue
        
        peer_file = talk_dir / f"{peer_clean}.yml"
        
        try:
            was_created = create_default_talk_file(
                peer_file,
                liking=default_score,
                creditability=default_score,
                overwrite=overwrite,
                logger_obj=log
            )
            if was_created:
                if peer_file.exists() and peer_file.stat().st_size > 50:  # Basic sanity check
                    created_count += 1
                else:
                    updated_count += 1
        except Exception as e:
            log.warning("Failed to process peer file for %s: %s", peer, e)
    
    log.info(
        "Talk history initialization completed for %s: %d created/updated files for %d peers",
        agent, created_count + updated_count, len([p for p in peers if sanitize_name(p) != agent_clean and p != agent])
    )
    
    return talk_dir


def main() -> int:
    """CLI entry point for testing."""
    import argparse
    
    parser = argparse.ArgumentParser(description="Initialize talk history files")
    parser.add_argument("--game-id", required=True, help="Game ID")
    parser.add_argument("--agent", required=True, help="Agent name")
    parser.add_argument("--peers", nargs="+", required=True, help="List of all agent names")
    parser.add_argument("--base-dir", type=Path, 
                       default=Path("/home/bi23056/lab/inlg2025/bdi_aiwolf_inlg2025/info/bdi_info/micro_bdi"),
                       help="Base directory")
    parser.add_argument("--default-score", type=float, default=DEFAULT_SCORE,
                       help="Default liking/creditability score")
    parser.add_argument("--overwrite", action="store_true",
                       help="Overwrite existing files")
    parser.add_argument("--verbose", action="store_true", help="Verbose logging")
    
    args = parser.parse_args()
    
    if args.verbose:
        logging.basicConfig(level=logging.DEBUG, format="%(levelname)s: %(message)s")
    else:
        logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")
    
    try:
        talk_dir = init_talk_history_for_agent(
            base_dir=args.base_dir,
            game_id=args.game_id,
            agent=args.agent,
            peers=args.peers,
            default_score=args.default_score,
            overwrite=args.overwrite,
            logger_obj=logger
        )
        print(f"Talk history initialized in: {talk_dir}")
        return 0
    except Exception as e:
        logger.error("Failed to initialize talk history: %s", e)
        return 1


if __name__ == "__main__":
    raise SystemExit(main())